[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Pandas-Bokeh Blog",
    "section": "",
    "text": "Pandas Bokeh: High-Level Charting API for Bokeh with Pandas Integration\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Pandas-Bokeh.html",
    "href": "posts/Pandas-Bokeh.html",
    "title": "Pandas Bokeh: High-Level Charting API for Bokeh with Pandas Integration",
    "section": "",
    "text": "Introduction\nPandas Bokeh is a high-level charting library that integrates Bokeh’s interactive plotting capabilities into Pandas. With just a few additional lines of code, you can transform static visualizations into dynamic and engaging plots. Pandas Bokeh enhances Pandas’ .plot() function by allowing users to create interactive visualizations effortlessly.\nPandas Bokeh supports a wide range of charts such as bar charts, line graphs, scatter plots, histogram, pie plot, area plot, map plot, and even geo plots.\n\n\nInstallation\nTo install Pandas Bokeh, simply run:\n\npip insatll python-bokeh\n\nAfter installation, you need to enable Bokeh for Pandas by executing:\n\nimport pandas as pd\nimport pandas_bokeh\nimport numpy as np\n\npd.set_option(\"plotting.backend\", \"pandas_bokeh\")\npandas_bokeh.output_notebook()\n\n\n        \n        Loading BokehJS ...\n    \n\n\n\n\n\n\n\nKey Features & Explanation\n\nInteractive Visualizations\n\n\nEnables zooming, panning, and tooltips for enhanced user experience.\nInteractive legends to toggle visibility of data points.\nHover tools to display precise data values dynamically.\n\n\nSeamless Pandas Integration\n\n\nWorks directly with Pandas DataFrames and Series, reducing the need for additional data transformations.\nProvides a simple API for plotting without complex configuration.\n\n\nMultiple Plot Types\n\n\nSupports various charts such as:\n\nLine charts for trend analysis.\nBar charts for categorical comparisons.\nScatter plots for correlation analysis.\nHistograms for frequency distributions.\nGeospatial maps for location-based data visualization.\n\n\n\nOutput Flexibility\n\n\nSupports rendering plots in:\n\nJupyter Notebooks for quick prototyping.\nStandalone HTML files for easy sharing.\nWeb applications via Bokeh server for dynamic dashboards.\n\n\n\nCustomization Options\n\n\nAllows fine-tuning of:\n\nColors, labels, titles, and legends to improve readability.\nTooltips and hover information for deeper insights.\nThemes and styles to match branding and aesthetic preferences.\n\n\n\nStreaming & Real-Time Data\n\n\nEnables live data updates, ideal for:\n\nFinancial dashboards tracking stock price fluctuations.\nIoT applications monitoring sensor data in real-time.\nLive analytics dashboards in business intelligence.\n\n\n\nMap Visualizations\n\n\nProvides interactive geospatial mapping functionality.\nSupports plotting geographic data points with overlays.\nUseful for applications like demographic analysis and logistics tracking.\n\n\n\nCode Examples\n\nLine plot\n\n# Synthetic stock prices\ndf = pd.DataFrame({\n    \"Samsung\": np.random.randn(600) + 0.3, \n    \"Apple\": np.random.randn(600) + 0.55\n}, index=pd.date_range('1/1/2010', periods=600))\n\n# Simulate stock prices with a different starting value\ndf = df.cumsum() + 20 \n\n# Plot Samsung and Apple stock prices\ndf.plot_bokeh(kind=\"line\",\n              title=\"Stock Prices of Samsung & Apple\",\n              xlabel=\"Date\",\n              ylabel=\"Stock Price ($)\",\n              colormap=[\"blue\", \"red\"],\n              figsize=(900, 500))\n\n\n  \n\n\n\n\n\nFigure(id = '1313', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [DatetimeAxis(id='1324', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='1327', ...), Grid(id='1331', ...), Legend(id='1375', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 500,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [LinearAxis(id='1328', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = False,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'webgl',renderers = [GlyphRenderer(id='1351', ...), GlyphRenderer(id='1384', ...)],reset_policy = 'standard',right = [],sizing_mode = 'fixed',subscribed_events = [],syncable = True,tags = [],title = Title(id='1314', ...),title_location = 'above',toolbar = Toolbar(id='1339', ...),toolbar_location = 'right',toolbar_sticky = True,visible = True,width = 900,width_policy = 'auto',x_range = DataRange1d(id='1316', ...),x_scale = LinearScale(id='1320', ...),y_range = DataRange1d(id='1318', ...),y_scale = LinearScale(id='1322', ...))\n\n\n\n\nThe above code generates and visualizes synthetic stock price data using pandas-bokeh.\nThe plot is interactive, allowing zooming, panning, hovertool and tooltips.\nOn clicking the legend elements, the particular graphs hides.\nUnlike matplotlib, pandas-bokeh provides dynamic plot.\nThese types of plots are commonly used for stock price trends, weather data, and sensor readings.\n\n\ndf.plot_bokeh(rangetool=True,\n              colormap=[\"blue\", \"red\"],\n              figsize=(900, 500))\n\n\n  \n\n\n\n\n\nColumn(id = '1693', …)align = 'start',aspect_ratio = None,background = None,children = [Figure(id='1556', ...), Figure(id='1589', ...)],css_classes = [],disabled = False,height = None,height_policy = 'auto',js_event_callbacks = {},js_property_callbacks = {},margin = (0, 0, 0, 0),max_height = None,max_width = None,min_height = None,min_width = None,name = None,rows = 'auto',sizing_mode = None,spacing = 0,subscribed_events = [],syncable = True,tags = [],visible = True,width = None,width_policy = 'auto')\n\n\n\n\nSome advanced line plots like point plot or lineplot with rangetool helps visualize the data more easily.\nThe above plot is lineplot with range tool, we can change the range of data above by dragging the box\n\n\n\n\nHistogram\n\n# Generate synthetic exam score data for two subjects\ndf = pd.DataFrame({\n    \"Math Scores\": np.random.normal(75, 10, 1000),  \n    \"Science Scores\": np.random.normal(80, 12, 1000)  \n})\n\n# Plot Exam Score Distribution (topontop)\ndf.plot_bokeh.hist(\n    bins=30, \n    histogram_type=\"topontop\",\n    title=\"Exam Score Distribution: Math vs Science (topontop)\",\n    xlabel=\"Exam Scores\", \n    ylabel=\"Number of Students\",\n    colormap=[\"blue\", \"green\"],\n    figsize=(900, 500),\n    line_color=\"black\"\n)\n\n# Plot Exam Score Distribution (Sidebyside)\ndf.plot_bokeh.hist(\n    bins=30,\n    histogram_type=\"sidebyside\",\n    title=\"Exam Score Distribution: Math vs Science (Sidebyside)\",\n    xlabel=\"Exam Scores\", \n    ylabel=\"Number of Students\",\n    colormap=[\"blue\", \"green\"],\n    figsize=(900, 500),\n    line_color=\"black\"\n)\n\n# Plot Exam Score Distribution (Stacked)\ndf.plot_bokeh.hist(\n    bins=30,\n    alpha=0.6,\n    histogram_type=\"stacked\",\n    stacked=True, \n    title=\"Exam Score Distribution: Math vs Science (Stacked)\",\n    xlabel=\"Exam Scores\", \n    ylabel=\"Number of Students\",\n    colormap=[\"blue\", \"green\"],\n    figsize=(900, 500),\n    line_color=\"black\"\n)\n\n\n  \n\n\n\n\n\n\n  \n\n\n\n\n\n\n  \n\n\n\n\n\nFigure(id = '2416', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [LinearAxis(id='2427', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='2430', ...), Grid(id='2434', ...), Legend(id='2466', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 500,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [LinearAxis(id='2431', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = False,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'webgl',renderers = [GlyphRenderer(id='2454', ...), GlyphRenderer(id='2475', ...)],reset_policy = 'standard',right = [],sizing_mode = 'fixed',subscribed_events = [],syncable = True,tags = [],title = Title(id='2417', ...),title_location = 'above',toolbar = Toolbar(id='2442', ...),toolbar_location = 'right',toolbar_sticky = True,visible = True,width = 900,width_policy = 'auto',x_range = DataRange1d(id='2419', ...),x_scale = LinearScale(id='2423', ...),y_range = DataRange1d(id='2421', ...),y_scale = LinearScale(id='2425', ...))\n\n\n\n\nFor histograms (kind=“hist”) or .plot_bokeh.hist, pandas-bokeh has a lot of different features including type of histogram_type (“sidebyside”, “topontop” or “stacked”)\nUsers can hover over bars to see exact values for deep data analysis.\nUnlike matplotlib, it is dynamic, zooming, hovering and other features makes it more interactive than normal matplot\n\n\n\nPie plot\n\ndata = {\n    \"Company\": [\"Apple\", \"Samsung\", \"Huawei\", \"Xiaomi\", \"Oppo\", \"Others\"],\n    \"2000\": [0, 5, 1, 0, 0, 94],\n    \"2005\": [2, 15, 5, 0, 0, 78],\n    \"2010\": [25, 30, 10, 5, 3, 27],\n    \"2015\": [45, 20, 15, 8, 5, 7],\n    \"2020\": [50, 18, 12, 10, 7, 3]\n}\n\ndf_market = pd.DataFrame(data)\n\ndf_market.plot_bokeh.pie(\n    x=\"Company\",\n    y=\"2020\",\n    colormap=[\"red\", \"blue\", \"green\", \"orange\", \"purple\", \"grey\"],\n    title=\"Smartphone Market Share in 2020\"\n)\n\n__x__values_original\n\n\n\n  \n\n\n\n\n\nFigure(id = '1188', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [LinearAxis(id='1199', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='1202', ...), Grid(id='1206', ...), Legend(id='1240', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 400,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [LinearAxis(id='1203', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = False,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'canvas',renderers = [GlyphRenderer(id='1228', ...)],reset_policy = 'standard',right = [],sizing_mode = None,subscribed_events = [],syncable = True,tags = [],title = Title(id='1189', ...),title_location = 'above',toolbar = Toolbar(id='1214', ...),toolbar_location = None,toolbar_sticky = True,visible = True,width = 600,width_policy = 'auto',x_range = Range1d(id='1191', ...),x_scale = LinearScale(id='1195', ...),y_range = Range1d(id='1193', ...),y_scale = LinearScale(id='1197', ...))\n\n\n\n\ndf_market.plot_bokeh.pie(\n    x=\"Company\",\n    colormap=[\"red\", \"blue\", \"green\", \"orange\", \"purple\", \"grey\"],\n    title=\"Smartphone Market Share (2000-2020)\",\n    line_color=\"grey\"\n)\n\n__x__values_original\n\n\n\n  \n\n\n\n\n\nFigure(id = '2687', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [LinearAxis(id='2698', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='2701', ...), Grid(id='2705', ...), Legend(id='2859', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 400,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [LinearAxis(id='2702', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = False,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'canvas',renderers = [GlyphRenderer(id='2727', ...), GlyphRenderer(id='2734', ...), GlyphRenderer(id='2740', ...), GlyphRenderer(id='2751', ...), GlyphRenderer(id='2758', ...), GlyphRenderer(id='2764', ...), GlyphRenderer(id='2775', ...), GlyphRenderer(id='2782', ...), GlyphRenderer(id='2788', ...), GlyphRenderer(id='2799', ...), GlyphRenderer(id='2806', ...), GlyphRenderer(id='2812', ...), GlyphRenderer(id='2823', ...), GlyphRenderer(id='2866', ...), GlyphRenderer(id='2872', ...)],reset_policy = 'standard',right = [],sizing_mode = None,subscribed_events = [],syncable = True,tags = [],title = Title(id='2688', ...),title_location = 'above',toolbar = Toolbar(id='2713', ...),toolbar_location = None,toolbar_sticky = True,visible = True,width = 600,width_policy = 'auto',x_range = Range1d(id='2690', ...),x_scale = LinearScale(id='2694', ...),y_range = Range1d(id='2692', ...),y_scale = LinearScale(id='2696', ...))\n\n\n\n\n\nBar plot\n\ndata = {\n    \"Region\": [\"North America\", \"Europe\", \"Asia-Pacific\", \"Latin America\", \"Middle East & Africa\"],\n    \"2015\": [120, 150, 500, 80, 60],\n    \"2016\": [130, 160, 550, 85, 65],\n    \"2017\": [140, 170, 600, 90, 70],\n    \"2018\": [150, 180, 650, 100, 75],\n    \"2019\": [160, 190, 700, 110, 80],\n    \"2020\": [170, 200, 750, 120, 85]\n}\n\ndf_sales = pd.DataFrame(data).set_index(\"Region\")\n\ndf_sales.plot_bokeh.bar(\n    ylabel=\"Sales (in millions)\",\n    title=\"Smartphone Sales by Region in 2020\",\n    alpha=0.6\n)\n\n\n  \n\n\n\n\n\nFigure(id = '3239', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [LinearAxis(id='3250', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='3253', ...), Grid(id='3257', ...), Legend(id='3290', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 400,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [LinearAxis(id='3254', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = False,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'webgl',renderers = [GlyphRenderer(id='3279', ...), GlyphRenderer(id='3299', ...), GlyphRenderer(id='3318', ...), GlyphRenderer(id='3337', ...), GlyphRenderer(id='3356', ...), GlyphRenderer(id='3375', ...)],reset_policy = 'standard',right = [],sizing_mode = 'fixed',subscribed_events = [],syncable = True,tags = [],title = Title(id='3240', ...),title_location = 'above',toolbar = Toolbar(id='3265', ...),toolbar_location = 'right',toolbar_sticky = True,visible = True,width = 600,width_policy = 'auto',x_range = DataRange1d(id='3242', ...),x_scale = LinearScale(id='3246', ...),y_range = DataRange1d(id='3244', ...),y_scale = LinearScale(id='3248', ...))\n\n\n\n\ndf_sales.plot_bokeh.bar(\n    ylabel=\"Sales (in millions)\",\n    title=\"Smartphone Sales by Region (2015-2020)\",\n    stacked=True,\n    alpha=0.6\n)\n\n\n  \n\n\n\n\n\nFigure(id = '3615', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [LinearAxis(id='3626', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='3629', ...), Grid(id='3633', ...), Legend(id='3677', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 400,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [LinearAxis(id='3630', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = False,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'webgl',renderers = [GlyphRenderer(id='3666', ...), GlyphRenderer(id='3683', ...), GlyphRenderer(id='3699', ...), GlyphRenderer(id='3715', ...), GlyphRenderer(id='3731', ...), GlyphRenderer(id='3747', ...)],reset_policy = 'standard',right = [],sizing_mode = 'fixed',subscribed_events = [],syncable = True,tags = [],title = Title(id='3616', ...),title_location = 'above',toolbar = Toolbar(id='3641', ...),toolbar_location = 'right',toolbar_sticky = True,visible = True,width = 600,width_policy = 'auto',x_range = DataRange1d(id='3618', ...),x_scale = LinearScale(id='3622', ...),y_range = DataRange1d(id='3620', ...),y_scale = LinearScale(id='3624', ...))\n\n\n\n\ndf_sales.reset_index(inplace=True)\n\ndf_sales.plot_bokeh(\n    kind=\"barh\",\n    x=\"Region\",\n    xlabel=\"Sales (in millions)\",\n    title=\"Smartphone Sales by Region (2015-2020)\",\n    alpha=0.6,\n    legend=\"bottom_right\"\n)\n\n\n  \n\n\n\n\n\nFigure(id = '4387', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [LinearAxis(id='4398', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='4401', ...), Grid(id='4405', ...), Legend(id='4438', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 400,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [LinearAxis(id='4402', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = False,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'webgl',renderers = [GlyphRenderer(id='4427', ...), GlyphRenderer(id='4447', ...), GlyphRenderer(id='4466', ...), GlyphRenderer(id='4485', ...), GlyphRenderer(id='4504', ...), GlyphRenderer(id='4523', ...), GlyphRenderer(id='4542', ...)],reset_policy = 'standard',right = [],sizing_mode = 'fixed',subscribed_events = [],syncable = True,tags = [],title = Title(id='4388', ...),title_location = 'above',toolbar = Toolbar(id='4413', ...),toolbar_location = 'right',toolbar_sticky = True,visible = True,width = 600,width_policy = 'auto',x_range = DataRange1d(id='4390', ...),x_scale = LinearScale(id='4394', ...),y_range = DataRange1d(id='4392', ...),y_scale = LinearScale(id='4396', ...))\n\n\n\n\n\nScatter plot\nScatter plots help visualize the relationship between two numerical variables. With Pandas-Bokeh, we can create interactive scatter plots that allow zooming and hovering over data points.\n\n# Age vs. Annual Spending\nnp.random.seed(42)  # For reproducibility\ndf = pd.DataFrame({\n    \"Age\": np.random.randint(18, 65, 100),  # Random ages between 18 and 65\n    \"Annual_Spending\": np.random.normal(50000, 15000, 100).astype(int),  # Normally distributed spending\n    \"Spending_Category\": np.random.choice([\"Low\", \"Medium\", \"High\"], 100, p=[0.3, 0.5, 0.2])  # Spending categories\n})\n\n# Create scatter plot\ndf.plot_bokeh.scatter(\n    x=\"Age\",\n    y=\"Annual_Spending\",\n    category=\"Spending_Category\",\n    title=\"Customer Age vs. Annual Spending\",\n    colormap=[\"green\", \"orange\", \"blue\"],\n    size=6,\n    hovertool_string=\"Age: @Age &lt;br&gt; Annual_Spending: @Annual_Spending &lt;br&gt; Spending_Category: @Spending_Category\"\n)\n\n\n  \n\n\n\n\n\nFigure(id = '4174', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [LinearAxis(id='4185', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='4188', ...), Grid(id='4192', ...), Legend(id='4225', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 400,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [LinearAxis(id='4189', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = False,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'webgl',renderers = [GlyphRenderer(id='4213', ...), GlyphRenderer(id='4234', ...), GlyphRenderer(id='4256', ...)],reset_policy = 'standard',right = [],sizing_mode = 'fixed',subscribed_events = [],syncable = True,tags = [],title = Title(id='4175', ...),title_location = 'above',toolbar = Toolbar(id='4200', ...),toolbar_location = 'right',toolbar_sticky = True,visible = True,width = 600,width_policy = 'auto',x_range = DataRange1d(id='4177', ...),x_scale = LinearScale(id='4181', ...),y_range = DataRange1d(id='4179', ...),y_scale = LinearScale(id='4183', ...))\n\n\n\n\nimport numpy as np\n\n# Generate synthetic data\ndf = pd.DataFrame({\n    \"Age\": np.random.randint(20, 60, 200),\n    \"Income\": np.random.randint(30000, 100000, 200)\n})\n\n# Create scatter plot\ndf.plot_bokeh.scatter(\n    x=\"Age\", y=\"Income\", title=\"Age vs. Income Scatter Plot\",\n    size=3, hovertool_string=\"Age: @Age &lt;br&gt; Income: @Income\"\n\n)\n\n\n  \n\n\n\n\n\nFigure(id = '3384', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [LinearAxis(id='3395', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='3398', ...), Grid(id='3402', ...), Legend(id='3434', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 400,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [LinearAxis(id='3399', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = False,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'webgl',renderers = [GlyphRenderer(id='3422', ...)],reset_policy = 'standard',right = [],sizing_mode = 'fixed',subscribed_events = [],syncable = True,tags = [],title = Title(id='3385', ...),title_location = 'above',toolbar = Toolbar(id='3410', ...),toolbar_location = 'right',toolbar_sticky = True,visible = True,width = 600,width_policy = 'auto',x_range = DataRange1d(id='3387', ...),x_scale = LinearScale(id='3391', ...),y_range = DataRange1d(id='3389', ...),y_scale = LinearScale(id='3393', ...))\n\n\n\n\n\nGeoPLots\nPandas-Bokeh also allows for interactive plotting of Maps using GeoPandas by providing a geopandas.GeoDataFrame.plot_bokeh() method. It allows to plot the following geodata on a map :\n\nPoints/MultiPoints\nLines/MultiLines\nPolygons/MultiPolygons\n\n\nimport geopandas as gpd\nimport warnings\nwarnings.filterwarnings(\"ignore\", message=\"The 'type' attribute is deprecated\")\nwarnings.filterwarnings(\"ignore\", category=UserWarning)\n\n# Read in GeoJSONs from URL:\ndf_states = gpd.read_file(\"https://raw.githubusercontent.com/PatrikHlobil/Pandas-Bokeh/master/docs/Testdata/states/states.geojson\")\ndf_cities = gpd.read_file(\"https://raw.githubusercontent.com/PatrikHlobil/Pandas-Bokeh/master/docs/Testdata/populated%20places/ne_10m_populated_places_simple_bigcities.geojson\")\n\ndf_cities[\"size\"] = df_cities.pop_max / 400000  # Normalize city population for size mapping\ndf_states[\"geometry\"] = df_states[\"geometry\"].apply(\n    lambda geom: geom if geom.geom_type == \"Polygon\" else geom.convex_hull\n)\n\n# Plot shapes of US states (pass figure options to this initial plot):\nfigure = df_states.plot_bokeh(\n    figsize=(800, 450),\n    simplify_shapes=10000,\n    show_figure=False,\n    xlim=[-170, -80],\n    ylim=[10, 70],\n    category=\"REGION\",\n    colormap=\"Dark2\",\n    legend=\"States\",\n    show_colorbar=False,\n)\n\n# Plot cities as points on top of the US states layer by passing the figure:\ndf_cities.plot_bokeh(\n    figure=figure,         # &lt;== pass figure here!\n    category=\"pop_max\",\n    colormap=\"Viridis\",\n    colormap_uselog=True,\n    size=\"size\",\n    hovertool_string=\"\"\"&lt;h1&gt;@name&lt;/h1&gt;\n                        &lt;h3&gt;Population: @pop_max &lt;/h3&gt;\"\"\",\n    marker=\"inverted_triangle\",\n    legend=\"Cities\",\n)\n\n\n  \n\n\n\n\n\nFigure(id = '2290', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [MercatorAxis(id='2301', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='2308', ...), Grid(id='2316', ...), Legend(id='2355', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 450,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [MercatorAxis(id='2309', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = True,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'webgl',renderers = [TileRenderer(id='2333', ...), GlyphRenderer(id='2343', ...), GlyphRenderer(id='2397', ...)],reset_policy = 'standard',right = [ColorBar(id='2415', ...)],sizing_mode = None,subscribed_events = [],syncable = True,tags = [],title = Title(id='2291', ...),title_location = 'above',toolbar = Toolbar(id='2324', ...),toolbar_location = 'right',toolbar_sticky = True,visible = True,width = 800,width_policy = 'auto',x_range = Range1d(id='2293', ...),x_scale = LinearScale(id='2297', ...),y_range = Range1d(id='2295', ...),y_scale = LinearScale(id='2299', ...))\n\n\n\nCombining Pandas-Bokeh with GeoPandas allows visualization of city locations, travel routes, population density, etc.\n\n# Explode MultiPolygons into individual Polygons\ndf_airports = gpd.read_file(\"https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json\")\ndf_airports = df_airports.explode(index_parts=False)  # Explode MultiPolygons\ndf_airports['country_id'] = pd.factorize(df_airports['name'])[0]\ndf_airports.plot_bokeh(category=\"country_id\", colormap=\"Category20\")\n\n\n  \n\n\n\n\n\nFigure(id = '2510', …)above = [],align = 'start',aspect_ratio = None,aspect_scale = 1,background = None,background_fill_alpha = 1.0,background_fill_color = '#ffffff',below = [MercatorAxis(id='2521', ...)],border_fill_alpha = 1.0,border_fill_color = '#ffffff',center = [Grid(id='2528', ...), Grid(id='2536', ...), Legend(id='2575', ...)],css_classes = [],disabled = False,extra_x_ranges = {},extra_x_scales = {},extra_y_ranges = {},extra_y_scales = {},frame_height = None,frame_width = None,height = 400,height_policy = 'auto',hidpi = True,inner_height = 0,inner_width = 0,js_event_callbacks = {},js_property_callbacks = {},left = [MercatorAxis(id='2529', ...)],lod_factor = 10,lod_interval = 300,lod_threshold = 2000,lod_timeout = 500,margin = (0, 0, 0, 0),match_aspect = True,max_height = None,max_width = None,min_border = 5,min_border_bottom = None,min_border_left = None,min_border_right = None,min_border_top = None,min_height = None,min_width = None,name = None,outer_height = 0,outer_width = 0,outline_line_alpha = 1.0,outline_line_cap = 'butt',outline_line_color = '#e5e5e5',outline_line_dash = [],outline_line_dash_offset = 0,outline_line_join = 'bevel',outline_line_width = 1,output_backend = 'webgl',renderers = [TileRenderer(id='2553', ...), GlyphRenderer(id='2563', ...)],reset_policy = 'standard',right = [ColorBar(id='2579', ...)],sizing_mode = None,subscribed_events = [],syncable = True,tags = [],title = Title(id='2511', ...),title_location = 'above',toolbar = Toolbar(id='2544', ...),toolbar_location = 'right',toolbar_sticky = True,visible = True,width = 600,width_policy = 'auto',x_range = DataRange1d(id='2513', ...),x_scale = LinearScale(id='2517', ...),y_range = DataRange1d(id='2515', ...),y_scale = LinearScale(id='2519', ...))\n\n\n\n\n\nConclusion\nPandas-Bokeh offers an effortless means to introduce interactivity into Pandas-based plots, enhancing data analysis to be more interactive and insightful. With Pandas-Bokeh, the strong charting features of Bokeh are coupled with Pandas, allowing users to produce dynamic plots with little effort. With its support for various chart types, real-time streaming of data, and geospatial visualizations, it is a great asset for analysts, data scientists, and researchers. Whether used within Jupyter Notebooks, standalone HTML documents, or web applications powered by Bokeh, Pandas-Bokeh adds storytelling power to data visualization.\nUse-Cases\n\nExploratory Data Analysis (EDA)\n\nQuickly generate interactive plots to analyze patterns and trends in datasets.\nUse hover tools and zooming to inspect outliers and distributions.\n\nTime-Series Analysis\n\nCreate interactive line charts for financial data, stock trends, and sensor readings.\nUtilize range tools to dynamically adjust the displayed time window.\n\nGeospatial Data Visualization\n\nVisualize geographic distributions with interactive map plots.\nOverlay city locations, population density, and regional data on maps.\n\nReal-Time Data Monitoring\n\nBuild dashboards for stock market tracking, IoT data monitoring, and business intelligence.\nUpdate plots dynamically with live-streamed data sources.\n\nBusiness Intelligence & Reporting\n\nEnhance reports with interactive bar, pie, and scatter plots for better decision-making.\nAllow users to filter and zoom into key insights effortlessly.\n\n\nBy leveraging Pandas-Bokeh, users can transform static visualizations into interactive experiences, making data exploration more intuitive and impactful."
  }
]